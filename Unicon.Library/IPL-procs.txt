################################################################################
File:
abkform.icn
********************************************************************************
link:
bkutil
********************************************************************************
link:
pbkform
********************************************************************************
procedure:
abk_write_id(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
********************************************************************************
record:
abk_id(releaseNum, filetype)
--------------------------------------------------------------------------------
field:
releaseNum
type:
<unknown>
--------------------------------------------------------------------------------
field:
filetype
type:
<unknown>
********************************************************************************
procedure:
abk_read_id(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record pbk_id
********************************************************************************
record:
abk_settings(startTime, granularity, alarmEnable, leadTime, carryForward)
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
granularity
type:
<unknown>
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
carryForward
type:
<unknown>
********************************************************************************
procedure:
abk_write_settings(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
record abk_settings
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
abk_read_settings(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
return: record abk_settings
********************************************************************************
record:
abk_daily(alarmEnable, year, month, day, startTime, endTime, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
year
type:
<unknown>
--------------------------------------------------------------------------------
field:
month
type:
<unknown>
--------------------------------------------------------------------------------
field:
day
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_daily(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
record abk_settings
--------------------------------------------------------------------------------
return: record abk_settings
********************************************************************************
procedure:
abk_read_daily(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_weekly(alarmEnable, dayOfWeek, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfWeek
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_weekly(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_weekly
********************************************************************************
procedure:
abk_read_weekly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_monthly(alarmEnable, dayOfMonth, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_monthly(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_monthly
********************************************************************************
procedure:
abk_read_monthly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_monthly_pos(alarmEnable, weekOfMonth, dayOfWeek, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
weekOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfWeek
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
--------------------------------------------------------------------------------
********************************************************************************
procedure:
abk_write_monthly_pos(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_monthly_pos
********************************************************************************
procedure:
abk_read_monthly_pos(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_yearly(alarmEnable, monthOfYear, dayOfMonth, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
monthOfYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_yearly(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_yearly
********************************************************************************
procedure:
abk_read_yearly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_todo(carryForward, checkOff, priority, startYear, startMonth, startDay, CheckOffYear, CheckOffMonth, CheckOffDay, toDoText, toDoNote)
--------------------------------------------------------------------------------
field:
carryForward
type:
<unknown>
--------------------------------------------------------------------------------
field:
checkOff
type:
<unknown>
--------------------------------------------------------------------------------
field:
priority
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
toDoText
type:
string
--------------------------------------------------------------------------------
field:
toDoNote
type:
string
********************************************************************************
procedure:
abk_write_todo(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_todo
********************************************************************************
procedure:
abk_read_todo(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
procedure:
abk_write_end(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
abk_read_end(f,id)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: &null
################################################################################
File:
adjuncts.icn
********************************************************************************
global:
_slash
type:
<unknown>
********************************************************************************
global:
_baselen
type:
<unknown>
********************************************************************************
global:
_delimiter
type:
<unknown>
********************************************************************************
global:
_OS_offset
type:
<unknown>
********************************************************************************
global:
firstline
type:
<unknown>
********************************************************************************
procedure:
Set_OS()
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
Basename(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Pathname(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
getidxname(FNAME)
--------------------------------------------------------------------------------
parameter:
FNAME
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Strip(s, c)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
c
type:
cset
--------------------------------------------------------------------------------
return: string
################################################################################
File:
adlutils.icn
********************************************************************************
link:
lastname
********************************************************************************
link:
io
********************************************************************************
link:
namepfx
********************************************************************************
link:
title
********************************************************************************
record:
label(header, text, comments)
--------------------------------------------------------------------------------
field:
header
type:
string
--------------------------------------------------------------------------------
field:
text
type:
string
--------------------------------------------------------------------------------
field:
comments
type:
string

********************************************************************************
procedure:
nextadd()
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
return: record label
********************************************************************************
procedure:
writeadd(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
get_country(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_state(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_city(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_zipcode(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_lastname(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_namepfx(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_title(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
format_country(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
allof.icn
********************************************************************************
procedure:
allof(expr)
--------------------------------------------------------------------------------
parameter:
expr
type:
co-expression
--------------------------------------------------------------------------------
return: <unknown>
################################################################################
File:
allpat.icn
********************************************************************************
procedure:
allpat(s, i)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
suspend: string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
ansi.icn
********************************************************************************
invocable:
all
********************************************************************************
link:
iolib
********************************************************************************
procedure:
_isANSI()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
CUD(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUB(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUF(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUP(i,j)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUU(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
ED(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
EL(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
SGR(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
apply.icn
********************************************************************************
procedure:
apply(plist, arg)
--------------------------------------------------------------------------------
parameter:
plist
type:
list
--------------------------------------------------------------------------------
parameter:
arg
type:
<unknown>
--------------------------------------------------------------------------------
suspend: <unknown>
################################################################################
File:
argparse.icn
********************************************************************************
procedure:
argparse(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: list
################################################################################
File:
array.icn
********************************************************************************
record:
array(structure, lbs)
--------------------------------------------------------------------------------
field:
structure
type:
<unknown>
--------------------------------------------------------------------------------
field:
lbs
type:
<unknown>
********************************************************************************
procedure:
create_array(lbs, ubs, value)
--------------------------------------------------------------------------------
parameter:
lbs
type:
list
--------------------------------------------------------------------------------
parameter:
ubs
type:
list
--------------------------------------------------------------------------------
parameter:
value
type:
<unknown>
--------------------------------------------------------------------------------
return: record array
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
create_struct(lengths, value)
--------------------------------------------------------------------------------
parameter:
lengths
type:
list
--------------------------------------------------------------------------------
parameter:
value
type:
<unknown>
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ref_array(A, subscrs[])
--------------------------------------------------------------------------------
parameter:
A
type:
record array
--------------------------------------------------------------------------------
parameter:
subscrs
type:
list
--------------------------------------------------------------------------------
return: <unknown>
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
asciinam.icn
********************************************************************************
procedure:
asciiname(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
base64.icn
********************************************************************************
procedure:
base64encode(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
base64decode(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
basename.icn
********************************************************************************
procedure:
basename(name, suffix)
--------------------------------------------------------------------------------
parameter:
name
type:
string
--------------------------------------------------------------------------------
parameter:
suffix
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
binary.icn
********************************************************************************
global:
pack_short
********************************************************************************
global:
pack_long
********************************************************************************
global:
unpack_short
********************************************************************************
global:
unpack_unsigned_short
********************************************************************************
global:
unpack_long
********************************************************************************
global:
unpack_unsigned_long
********************************************************************************
global:
pack_int_proc
********************************************************************************
global:
unpack_int_proc
********************************************************************************
global:
unpack_unsigned_int_proc
********************************************************************************
procedure:
pack(template, values[])
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
parameter:
values
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack(template, binaryString)
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
parameter:
binaryString
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
record:
pack_template_rec(conversion, count)
--------------------------------------------------------------------------------
field:
conversion
type:
<unknown>
--------------------------------------------------------------------------------
field:
count
type:
<unknown>
********************************************************************************
procedure:
pack_parse_template(template)
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
suspend: record pack_template_rec
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
pack_parse_space()
--------------------------------------------------------------------------------
suspend: string
********************************************************************************
procedure:
pack_big_endian()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_little_endian()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_int_as_long()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_int_as_short()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_bits_low_to_high(v)
--------------------------------------------------------------------------------
parameter:
v
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_bits_high_to_low(v)
--------------------------------------------------------------------------------
parameter:
v
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_low_to_high(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_high_to_low(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_digit(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
pack_char(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_nshort(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_vshort(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_int(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_nlong(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_vlong(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_uuencoded_string(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_bits_low_to_high(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_bits_high_to_low(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_low_to_high(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_high_to_low(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_digit(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_char()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_char()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_nshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_vshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_nshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_vshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_int()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_int()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_nlong()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_vlong()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_nlong()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
unpack_unsigned_vlong()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
unpack_uuencoded_string()
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_double_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_single_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_extended_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_extended96_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_double_float()
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
unpack_single_float()
--------------------------------------------------------------------------------
return: real

********************************************************************************
procedure:
unpack_extended_float(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
unpack_extended96_float()
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
pack_x80tox96(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_x96tox80(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
global:
UUErrorText
********************************************************************************
procedure:
UUDecodeString(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUDecodeChar(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
UUDecodeQuad(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeString(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeChar(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeTriple(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
bincvt.icn
********************************************************************************
procedure:
unsigned(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
raw(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
rawstring(i, size)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
parameter:
size
type:
integer
--------------------------------------------------------------------------------
return: string
################################################################################
File:
binop.icn
********************************************************************************
procedure:
binop(op, result, rest[])
--------------------------------------------------------------------------------
parameter:
op
type:
string
--------------------------------------------------------------------------------
parameter:
result
type:
<unknown>
--------------------------------------------------------------------------------
parameter:
rest
type:
list
--------------------------------------------------------------------------------
return: <unknown>
################################################################################
File:
bitint.icn
********************************************************************************
procedure:
int2bit(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
bit2int(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
################################################################################
File:
bitstr.icn
********************************************************************************
record:
BitString(s, buffer, bufferBits)
--------------------------------------------------------------------------------
field:
s
type:
string
--------------------------------------------------------------------------------
field:
buffer
type:
<unknown>
--------------------------------------------------------------------------------
field:
bufferBits
type:
<unknown>
********************************************************************************
procedure:
BitStringPut(bitString, nbits, value)
--------------------------------------------------------------------------------
parameter:
bitString
type:
record BitString
--------------------------------------------------------------------------------
parameter:
nbits
type:
integer
--------------------------------------------------------------------------------
parameter:
value
type:
integer
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
BitStringGet(bitString, nbits)
--------------------------------------------------------------------------------
parameter:
bitString
type:
record BitString
--------------------------------------------------------------------------------
parameter:
nbits
type:
integer
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
################################################################################
File:
bitstrm.icn
********************************************************************************
procedure:
BitStreamWrite(outfile, bits, value, outproc)
--------------------------------------------------------------------------------
parameter:
outfile
type:
file
--------------------------------------------------------------------------------
parameter:
bits
type:
integer
--------------------------------------------------------------------------------
parameter:
value
type:
integer
--------------------------------------------------------------------------------
parameter:
outproc
type:
procedure
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
BitStreamRead(infile, bits, inproc)
--------------------------------------------------------------------------------
parameter:
infile
type:
file
--------------------------------------------------------------------------------
parameter:
bits
type:
integer
--------------------------------------------------------------------------------
parameter:
inproc
type:
procedure
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
################################################################################
File:
bkutil.icn
********************************************************************************
procedure:
bk_int(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
bk_read_int(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
bk_format_lines(s, width)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
width
type:
integer
--------------------------------------------------------------------------------
return: list
################################################################################
File:
bold.icn
********************************************************************************
procedure:
bold(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
uscore(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
bufread.icn
********************************************************************************
global:
__buf
type:
table
********************************************************************************
procedure:
bufopen(fname)
--------------------------------------------------------------------------------
parameter:
fname
type:
string
--------------------------------------------------------------------------------
return: file
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
bufclose(file)
--------------------------------------------------------------------------------
parameter:
file
type:
file
--------------------------------------------------------------------------------
return: file
********************************************************************************
procedure:
bufread(file)
--------------------------------------------------------------------------------
parameter:
file
type:
file
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
bufnext(file, n)
--------------------------------------------------------------------------------
parameter:
file
type:
file
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
calendar.icn
********************************************************************************
global:
Cal_DateBaseYear
type:
<unknown>
********************************************************************************
global:
Cal_CurrentTimeZone
type:
<unknown>
********************************************************************************
global:
Cal_TimeZoneGMT,
type:
<unknown>
********************************************************************************
global:
Cal_SecPerMin
type:
<unknown>
********************************************************************************
global:
Cal_SecPerHour
type:
<unknown>
********************************************************************************
global:
Cal_SecPerDay
type:
<unknown>
********************************************************************************
global:
Cal_SecPerWeek,
type:
<unknown>
********************************************************************************
global:
Cal_MonthNames
type:
<unknown>
********************************************************************************
global:
Cal_DayNames
type:
<unknown>
********************************************************************************
global:
Cal_TimeZoneList
type:
<unknown>
********************************************************************************
global:
Cal_TimeZoneTable
type:
<unknown>
********************************************************************************
record:
Cal_Rec(year, month, day, hour, min, sec, weekday)
--------------------------------------------------------------------------------
field:
year
type:
integer
--------------------------------------------------------------------------------
field:
month
type:
integer
--------------------------------------------------------------------------------
field:
day
type:
integer
--------------------------------------------------------------------------------
field:
hour
type:
integer
--------------------------------------------------------------------------------
field:
min
type:
integer
--------------------------------------------------------------------------------
field:
sec
type:
integer
--------------------------------------------------------------------------------
field:
weekday
type:
integer
********************************************************************************
record:
Cal_TimeZoneRec(id, hoursFromGMT, data)
--------------------------------------------------------------------------------
field:
id
type:
<unknown>
--------------------------------------------------------------------------------
field:
hoursFromGMT
type:
integer
--------------------------------------------------------------------------------
field:
data
type:
<unknown>
********************************************************************************
record:
Cal_TimeZoneData(dstOffset, startYear, startMode, startMonth, startDay, startDayOfWeek, startTime, endMode, endMonth, endDay, endDayOfWeek, endTime)
--------------------------------------------------------------------------------
field:
dstOffset
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
integer
--------------------------------------------------------------------------------
field:
startMode
type:
string
--------------------------------------------------------------------------------
field:
startMonth
type:
integer
--------------------------------------------------------------------------------
field:
startDay
type:
integer
--------------------------------------------------------------------------------
field:
startDayOfWeek
type:
integer
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMode
type:
string
--------------------------------------------------------------------------------
field:
endMonth
type:
integer
--------------------------------------------------------------------------------
field:
endDay
type:
integer
--------------------------------------------------------------------------------
field:
endDayOfWeek
type:
integer
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
********************************************************************************
procedure:
Cal_Init(initialTimeZone)
--------------------------------------------------------------------------------
parameter:
initialTimeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
Cal_SecToRec(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: record Cal_Rec
********************************************************************************
procedure:
Cal_RecToSec(calRec, timeZone)
--------------------------------------------------------------------------------
parameter:
calRec
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_GetTimeZone(timeZoneName)
--------------------------------------------------------------------------------
parameter:
timeZoneName
type:
string
--------------------------------------------------------------------------------
return: record Cal_TimeZoneRec
********************************************************************************
procedure:
Cal_GetTimeZoneTable()
--------------------------------------------------------------------------------
return: table
********************************************************************************
procedure:
Cal_GetTimeZoneList()
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
Cal_LocalToGMTSec(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_GMTToLocalSec(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_IsLeapYear(year)			#: determine if year is leap
--------------------------------------------------------------------------------
parameter:
year
type:
integer
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_LeapYearsBetween(loYear, hiYear)
--------------------------------------------------------------------------------
parameter:
loYear
type:
integer
--------------------------------------------------------------------------------
parameter:
hiYear
type:
integer
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_IsDST(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
Cal_NthWeekdayToSec(year, month, weekday, n, fromDay)
--------------------------------------------------------------------------------
parameter:
year
type:
integer
--------------------------------------------------------------------------------
parameter:
month
type:
integer
--------------------------------------------------------------------------------
parameter:
weekday
type:
integer
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
parameter:
fromDay
type:
integer
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_DateLineToSec(dateline, timeZone)
--------------------------------------------------------------------------------
parameter:
dateline
type:
string
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_DateToSec(date, timeZone)
--------------------------------------------------------------------------------
parameter:
date
type:
string
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_SecToDate(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Cal_SecToDateLine(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Cal_SecToUnixDate(seconds, timeZone)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
timeZone
type:
record Cal_TimeZoneRec
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Cal_ClockToSec(seconds)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
Cal_SecToClock(seconds)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Cal_ApplyDSTRule(seconds, year, month, dstOffset, startMode, startMonth, startDay, startDayOfWeek, startTime, endMode, endMonth, endDay, endDayOfWeek, endTime)
--------------------------------------------------------------------------------
parameter:
seconds
type:
integer
--------------------------------------------------------------------------------
parameter:
year
type:
integer
--------------------------------------------------------------------------------
parameter:
month
type:
integer
--------------------------------------------------------------------------------
parameter:
dstOffset
type:
integer
--------------------------------------------------------------------------------
parameter:
startMode
type:
string
--------------------------------------------------------------------------------
parameter:
startMonth
type:
integer
--------------------------------------------------------------------------------
parameter:
startDay
type:
integer
--------------------------------------------------------------------------------
parameter:
startDayOfWeek
type:
integer
--------------------------------------------------------------------------------
parameter:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
parameter:
endMode
type:
string
--------------------------------------------------------------------------------
parameter:
endMonth
type:
integer
--------------------------------------------------------------------------------
parameter:
endDay
type:
integer
--------------------------------------------------------------------------------
parameter:
endDayOfWeek
type:
integer
--------------------------------------------------------------------------------
parameter:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
Cal_DSTDayOfMonthToSec(year, month, mode, day, dayOfWeek)
--------------------------------------------------------------------------------
parameter:
year
type:
integer
--------------------------------------------------------------------------------
parameter:
month
type:
integer
--------------------------------------------------------------------------------
parameter:
mode
type:
string
--------------------------------------------------------------------------------
parameter:
day
type:
integer
--------------------------------------------------------------------------------
parameter:
dayOfWeek
type:
integer
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
error: runerr
********************************************************************************
procedure:
Cal_MakeTimeZoneList()
--------------------------------------------------------------------------------
return: list
################################################################################
File:
calendat.icn
********************************************************************************
link:
datetime
################################################################################
File:
calls.icn
********************************************************************************
invocable:
all
********************************************************************************
link:
ivalue
********************************************************************************
link:
procname
********************************************************************************
record:
call(proc, args)
--------------------------------------------------------------------------------
field:
proc
type:
<unknown>
--------------------------------------------------------------------------------
field:
args
type:
<unknown>
********************************************************************************
procedure:
invoke(call)
--------------------------------------------------------------------------------
parameter:
call
type:
record call
--------------------------------------------------------------------------------
suspend: <unknown>
********************************************************************************
procedure:
call_image(call)
--------------------------------------------------------------------------------
parameter:
call
type:
record call
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
make_call(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: <unknown>
********************************************************************************
procedure:
make_args(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: list
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
call_code(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
write_calltable(T, p, f)
--------------------------------------------------------------------------------
parameter:
T
type:
table
--------------------------------------------------------------------------------
parameter:
p
type:
procedure
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
read_calltable(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: table
################################################################################
File:
capture.icn
********************************************************************************
procedure:
capture(p, x)
--------------------------------------------------------------------------------
parameter:
p
type:
file
type:
procedure
type:
&null
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: p
--------------------------------------------------------------------------------
return: p!list
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
write_capture_(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
writes_capture_(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
stop_capture_(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
uncaptured_write(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
uncaptured_writes(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
uncaptured_stop(x[])
--------------------------------------------------------------------------------
parameter:
x
type:
list
--------------------------------------------------------------------------------
return: string
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
cartog.icn
********************************************************************************
link:
geodat
********************************************************************************
link:
io
********************************************************************************
link:
lu
********************************************************************************
link:
numbers
********************************************************************************
link:
strings
********************************************************************************
global:
ctg_eps_ptab
type:
table
********************************************************************************
procedure:
project(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_rect
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: string
   return p.proj(p, L)
end
********************************************************************************
procedure:
invp(p)
--------------------------------------------------------------------------------
parameter:
record ctg_rect
type:
list
--------------------------------------------------------------------------------
return: string
   return (\p.inv)(p)
end
********************************************************************************
record:
ctg_rect(proj, inv, xmul, ymul, xadd, yadd)
--------------------------------------------------------------------------------
field:
proj
type:
procedure
--------------------------------------------------------------------------------
field:
inv
type:
procedure
--------------------------------------------------------------------------------
field:
xmul
type:
real
--------------------------------------------------------------------------------
field:
ymul
type:
real
--------------------------------------------------------------------------------
field:
xadd
type:
real
--------------------------------------------------------------------------------
field:
yadd
type:
real
********************************************************************************
procedure:
rectp(x1, y1, x2, y2, xm, ym)
--------------------------------------------------------------------------------
parameter:
x1
type:
real
--------------------------------------------------------------------------------
parameter:
y1
type:
real
--------------------------------------------------------------------------------
parameter:
x2
type:
real
--------------------------------------------------------------------------------
parameter:
y2
type:
real
--------------------------------------------------------------------------------
parameter:
xm
type:
real
--------------------------------------------------------------------------------
parameter:
ym
type:
real
--------------------------------------------------------------------------------
return: record ctg_rect
********************************************************************************
procedure:
ctg_rect_proj(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_rect
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ctg_rect_inv(p)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_rect
--------------------------------------------------------------------------------
return: record ctg_rect
********************************************************************************
record:
ctg_ppt(proj, inv, org, tgt, h11, h12, h13, h21, h22, h23, h31, h32, h33)
--------------------------------------------------------------------------------
field:
proj
type:
procedure
--------------------------------------------------------------------------------
field:
inv
type:
procedure
--------------------------------------------------------------------------------
field:
org
type:
list
--------------------------------------------------------------------------------
field:
tgt
type:
list
--------------------------------------------------------------------------------
field:
h11
type:
real
--------------------------------------------------------------------------------
field:
h12
type:
real
--------------------------------------------------------------------------------
field:
h13
type:
real
--------------------------------------------------------------------------------
field:
h21
type:
real
--------------------------------------------------------------------------------
field:
h22
type:
real
--------------------------------------------------------------------------------
field:
h23
type:
real
--------------------------------------------------------------------------------
field:
h31
type:
real
--------------------------------------------------------------------------------
field:
h32
type:
real
--------------------------------------------------------------------------------
field:
h33
type:
real
********************************************************************************
procedure:
pptrans(L1, L2)
--------------------------------------------------------------------------------
parameter:
L1
type:
list
--------------------------------------------------------------------------------
parameter:
L2
type:
list
--------------------------------------------------------------------------------
return: record ctg_ppt
********************************************************************************
procedure:
ctg_ppt_proj(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_ppt
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ctg_ppt_inv(p)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_ppt
--------------------------------------------------------------------------------
return: record ctg_ppt
********************************************************************************
$define k0	0.9996
$define M0	0.0

********************************************************************************
record:
ctg_utm(proj, inv, a, f, e, esq, epsq, c0, c2, c4, c6, c8)
--------------------------------------------------------------------------------
field:
proj
type:
procedure
--------------------------------------------------------------------------------
field:
inv
type:
procedure
--------------------------------------------------------------------------------
field:
a
type:
real
--------------------------------------------------------------------------------
field:
f
type:
real
--------------------------------------------------------------------------------
field:
e
type:
real
--------------------------------------------------------------------------------
field:
esq
type:
real
--------------------------------------------------------------------------------
field:
epsq
type:
real
--------------------------------------------------------------------------------
field:
c0
type:
real
--------------------------------------------------------------------------------
field:
c2
type:
real
--------------------------------------------------------------------------------
field:
c4
type:
real
--------------------------------------------------------------------------------
field:
c4
type:
real
--------------------------------------------------------------------------------
field:
c8
type:
real
********************************************************************************
procedure:
utm(a, f)
--------------------------------------------------------------------------------
parameter:
a
type:
real
--------------------------------------------------------------------------------
parameter:
f
type:
real
--------------------------------------------------------------------------------
return: record ctg_utm
********************************************************************************
procedure:
ctg_utm_proj(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_utm
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ctg_utm_inv(p)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_utm
--------------------------------------------------------------------------------
return: record ctg_utm
********************************************************************************
procedure:
ctg_iutm_proj(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_utm
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ctg_iutm_inv(p)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_utm
--------------------------------------------------------------------------------
return: record ctg_utm
********************************************************************************
record:
ctg_comp(proj, inv, projList)
--------------------------------------------------------------------------------
field:
proj
type:
procedure
--------------------------------------------------------------------------------
field:
inv
type:
procedure
--------------------------------------------------------------------------------
field:
projList
type:
list
********************************************************************************
procedure:
compose(a[])
--------------------------------------------------------------------------------
parameter:
a
type:
list
--------------------------------------------------------------------------------
return: record ctg_comp
********************************************************************************
procedure:
ctg_comp_proj(p, L)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_rect
--------------------------------------------------------------------------------
parameter:
L
type:
list
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
ctg_comp_inv(p)
--------------------------------------------------------------------------------
parameter:
p
type:
record ctg_comp
--------------------------------------------------------------------------------
return: record ctg_comp
################################################################################
File:
caseless.icn
********************************************************************************
procedure:
anycl(c, s, i1, i2)
--------------------------------------------------------------------------------
parameter:
c
type:
cset
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
balcl(c1, c2, c3, s, i1, i2)
--------------------------------------------------------------------------------
parameter:
c1
type:
cset
--------------------------------------------------------------------------------
parameter:
c2
type:
cset
--------------------------------------------------------------------------------
parameter:
c3
type:
cset
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
suspend: integer
--------------------------------------------------------------------------------
suspend: fail
********************************************************************************
procedure:
findcl(s1, s2, i1, i2)
--------------------------------------------------------------------------------
parameter:
s1
type:
string
--------------------------------------------------------------------------------
parameter:
s2
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
suspend: integer
--------------------------------------------------------------------------------
suspend: fail
********************************************************************************
procedure:
manycl(c, s, i1, i2)
--------------------------------------------------------------------------------
parameter:
c
type:
cset
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
matchcl(s1, s2, i1, i2)
--------------------------------------------------------------------------------
parameter:
s1
type:
string
--------------------------------------------------------------------------------
parameter:
s2
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
uptocl(c, s, i1, i2)
--------------------------------------------------------------------------------
parameter:
c
type:
cset
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i1
type:
integer
--------------------------------------------------------------------------------
parameter:
i2
type:
integer
--------------------------------------------------------------------------------
suspend: integer
--------------------------------------------------------------------------------
suspend: fail
################################################################################
File:
codeobj.icn
********************************************************************************
invocable:
all
********************************************************************************
link:
escape
********************************************************************************
link:
gener
********************************************************************************
link:
procname
********************************************************************************
link:
typecode
********************************************************************************
global:
outlab
********************************************************************************
global:
inlab
********************************************************************************
record:
triple(type,value,tag)
--------------------------------------------------------------------------------
field:
type
type:
string
--------------------------------------------------------------------------------
field:
value
type:
string
--------------------------------------------------------------------------------
field:
tag
type:
string
********************************************************************************
procedure:
encode(x,level)
--------------------------------------------------------------------------------
parameter:
x
type:
<unknown>
--------------------------------------------------------------------------------
parameter:
level
type:
integer
--------------------------------------------------------------------------------
suspend: string
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
decode(s,level)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
level
type:
integer
--------------------------------------------------------------------------------
suspend: <unknown>
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
separ(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
suspend: record triple
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
delist(s, tag)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
tag
type:
string
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure:
deset(s,tag)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
tag
type:
string
--------------------------------------------------------------------------------
return: set
********************************************************************************
procedure:
derecord(s,tag)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
tag
type:
string
--------------------------------------------------------------------------------
return: record
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
detable(s,tag)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
tag
type:
string
--------------------------------------------------------------------------------
return: table
********************************************************************************
procedure:
defile(s, tag)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
tag
type:
string
--------------------------------------------------------------------------------
return: file
--------------------------------------------------------------------------------
return: fail
################################################################################
################################################################################
################################################################################
################################################################################









