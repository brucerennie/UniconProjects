################################################################################
File:
abkform.icn
********************************************************************************
link:
bkutil
********************************************************************************
link:
pbkform
********************************************************************************
procedure:
abk_write_id(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
********************************************************************************
record:
abk_id(releaseNum, filetype)
--------------------------------------------------------------------------------
field:
releaseNum
type:
<unknown>
--------------------------------------------------------------------------------
field:
filetype
type:
<unknown>
********************************************************************************
procedure:
abk_read_id(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record pbk_id
********************************************************************************
record:
abk_settings(startTime, granularity, alarmEnable, leadTime, carryForward)
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
granularity
type:
<unknown>
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
carryForward
type:
<unknown>
********************************************************************************
procedure:
abk_write_settings(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
record abk_settings
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
abk_read_settings(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
return: record abk_settings
********************************************************************************
record:
abk_daily(alarmEnable, year, month, day, startTime, endTime, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
year
type:
<unknown>
--------------------------------------------------------------------------------
field:
month
type:
<unknown>
--------------------------------------------------------------------------------
field:
day
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_daily(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
record abk_settings
--------------------------------------------------------------------------------
return: record abk_settings
********************************************************************************
procedure:
abk_read_daily(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_weekly(alarmEnable, dayOfWeek, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfWeek
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_weekly(f, data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_weekly
********************************************************************************
procedure:
abk_read_weekly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_monthly(alarmEnable, dayOfMonth, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_monthly(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_monthly
********************************************************************************
procedure:
abk_read_monthly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_monthly_pos(alarmEnable, weekOfMonth, dayOfWeek, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
weekOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfWeek
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
--------------------------------------------------------------------------------
********************************************************************************
procedure:
abk_write_monthly_pos(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_monthly_pos
********************************************************************************
procedure:
abk_read_monthly_pos(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_yearly(alarmEnable, monthOfYear, dayOfMonth, startTime, startYear, startMonth, startDay, endTime, endYear, endMonth, endDay, leadTime, apptText, noteText)
--------------------------------------------------------------------------------
field:
alarmEnable
type:
<unknown>
--------------------------------------------------------------------------------
field:
monthOfYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
dayOfMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
endTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
endYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
endMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
endDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
leadTime
type:
<unknown>
--------------------------------------------------------------------------------
field:
apptText
type:
string
--------------------------------------------------------------------------------
field:
noteText
type:
string
********************************************************************************
procedure:
abk_write_yearly(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_yearly
********************************************************************************
procedure:
abk_read_yearly(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
record:
abk_todo(carryForward, checkOff, priority, startYear, startMonth, startDay, CheckOffYear, CheckOffMonth, CheckOffDay, toDoText, toDoNote)
--------------------------------------------------------------------------------
field:
carryForward
type:
<unknown>
--------------------------------------------------------------------------------
field:
checkOff
type:
<unknown>
--------------------------------------------------------------------------------
field:
priority
type:
<unknown>
--------------------------------------------------------------------------------
field:
startYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
startMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
startDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffYear
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffMonth
type:
<unknown>
--------------------------------------------------------------------------------
field:
CheckOffDay
type:
<unknown>
--------------------------------------------------------------------------------
field:
toDoText
type:
string
--------------------------------------------------------------------------------
field:
toDoNote
type:
string
********************************************************************************
procedure:
abk_write_todo(f,data)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
parameter:
data
type:
<unknown>
--------------------------------------------------------------------------------
return: record abk_todo
********************************************************************************
procedure:
abk_read_todo(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: record abk_daily
********************************************************************************
procedure:
abk_write_end(f)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
abk_read_end(f,id)
--------------------------------------------------------------------------------
parameter:
f
type:
file
--------------------------------------------------------------------------------
return: &null
################################################################################
File:
adjuncts.icn
********************************************************************************
global:
_slash
type:
<unknown>
********************************************************************************
global:
_baselen
type:
<unknown>
********************************************************************************
global:
_delimiter
type:
<unknown>
********************************************************************************
global:
_OS_offset
type:
<unknown>
********************************************************************************
global:
firstline
type:
<unknown>
********************************************************************************
procedure:
Set_OS()
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop()
********************************************************************************
procedure:
Basename(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Pathname(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
getidxname(FNAME)
--------------------------------------------------------------------------------
parameter:
FNAME
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
Strip(s, c)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
c
type:
cset
--------------------------------------------------------------------------------
return: string
################################################################################
File:
adlutils.icn
********************************************************************************
link:
lastname
********************************************************************************
link:
io
********************************************************************************
link:
namepfx
********************************************************************************
link:
title
********************************************************************************
record:
label(header, text, comments)
--------------------------------------------------------------------------------
field:
header
type:
string
--------------------------------------------------------------------------------
field:
text
type:
string
--------------------------------------------------------------------------------
field:
comments
type:
string

********************************************************************************
procedure:
nextadd()
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
return: record label
********************************************************************************
procedure:
writeadd(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
get_country(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_state(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_city(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_zipcode(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_lastname(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_namepfx(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
get_title(add)
--------------------------------------------------------------------------------
parameter:
add
type:
record label
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
format_country(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
allof.icn
********************************************************************************
procedure:
allof(expr)
--------------------------------------------------------------------------------
parameter:
expr
type:
co-expression
--------------------------------------------------------------------------------
return: <unknown>
################################################################################
File:
allpat.icn
********************************************************************************
procedure:
allpat(s, i)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
suspend: string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
ansi.icn
********************************************************************************
invocable:
all
********************************************************************************
link:
iolib
********************************************************************************
procedure:
_isANSI()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
CUD(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUB(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUF(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUP(i,j)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
CUU(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
ED(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
EL(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
SGR(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: &null
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
apply.icn
********************************************************************************
procedure:
apply(plist, arg)
--------------------------------------------------------------------------------
parameter:
plist
type:
list
--------------------------------------------------------------------------------
parameter:
arg
type:
<unknown>
--------------------------------------------------------------------------------
suspend: <unknown>
################################################################################
File:
argparse.icn
********************************************************************************
procedure:
argparse(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: list
################################################################################
File:
array.icn
********************************************************************************
record:
array(structure, lbs)
--------------------------------------------------------------------------------
field:
structure
type:
<unknown>
--------------------------------------------------------------------------------
field:
lbs
type:
<unknown>
********************************************************************************
procedure create_array(lbs, ubs, value)
--------------------------------------------------------------------------------
parameter:
lbs
type:
list
--------------------------------------------------------------------------------
parameter:
ubs
type:
list
--------------------------------------------------------------------------------
parameter:
value
type:
<unknown>
--------------------------------------------------------------------------------
return: record array
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure create_struct(lengths, value)
--------------------------------------------------------------------------------
parameter:
lengths
type:
list
--------------------------------------------------------------------------------
parameter:
value
type:
<unknown>
--------------------------------------------------------------------------------
return: list
********************************************************************************
procedure ref_array(A, subscrs[])
--------------------------------------------------------------------------------
parameter:
A
type:
record array
--------------------------------------------------------------------------------
parameter:
subscrs
type:
list
--------------------------------------------------------------------------------
return: <unknown>
--------------------------------------------------------------------------------
return: fail
--------------------------------------------------------------------------------
error: stop
################################################################################
File:
asciinam.icn
********************************************************************************
procedure:
asciiname(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
base64.icn
********************************************************************************
procedure base64encode(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure base64decode(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
basename.icn
********************************************************************************
procedure basename(name, suffix)
--------------------------------------------------------------------------------
parameter:
name
type:
string
--------------------------------------------------------------------------------
parameter:
suffix
type:
string
--------------------------------------------------------------------------------
return: string
################################################################################
File:
binary.icn
********************************************************************************
global:
pack_short
********************************************************************************
global:
pack_long
********************************************************************************
global:
unpack_short
********************************************************************************
global:
unpack_unsigned_short
********************************************************************************
global:
unpack_long
********************************************************************************
global:
unpack_unsigned_long
********************************************************************************
global:
pack_int_proc
********************************************************************************
global:
unpack_int_proc
********************************************************************************
global:
unpack_unsigned_int_proc
********************************************************************************
procedure:
pack(template, values[])
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
parameter:
values
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack(template, binaryString)
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
parameter:
binaryString
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
record:
pack_template_rec(conversion, count)
--------------------------------------------------------------------------------
field:
conversion
type:

--------------------------------------------------------------------------------
field:
count
type:

********************************************************************************
procedure:
pack_parse_template(template)
--------------------------------------------------------------------------------
parameter:
template
type:
string
--------------------------------------------------------------------------------
suspend: record pack_template_rec
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
pack_parse_space()
--------------------------------------------------------------------------------
suspend: string
********************************************************************************
procedure:
pack_big_endian()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_little_endian()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_int_as_long()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_int_as_short()
--------------------------------------------------------------------------------
return: &null
********************************************************************************
procedure:
pack_bits_low_to_high(v)
--------------------------------------------------------------------------------
parameter:
v
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_bits_high_to_low(v)
--------------------------------------------------------------------------------
parameter:
v
type:
list
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_low_to_high(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_high_to_low(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_hex_digit(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
error: stop
********************************************************************************
procedure:
pack_char(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_nshort(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_vshort(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_int(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_nlong(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_vlong(v)
--------------------------------------------------------------------------------
parameter:
v
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_uuencoded_string(v)
--------------------------------------------------------------------------------
parameter:
v
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_bits_low_to_high(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_bits_high_to_low(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_low_to_high(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_high_to_low(n)
--------------------------------------------------------------------------------
parameter:
n
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_hex_digit(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_char()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_char()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_nshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_vshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_nshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_vshort()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_int()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_int()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_nlong()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_vlong()
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
unpack_unsigned_nlong()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
unpack_unsigned_vlong()
--------------------------------------------------------------------------------
return: integer
--------------------------------------------------------------------------------
return: fail
********************************************************************************
procedure:
unpack_uuencoded_string()
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_double_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_single_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_extended_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_extended96_float(v)
--------------------------------------------------------------------------------
parameter:
v
type:
real
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
unpack_double_float()
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
unpack_single_float()
--------------------------------------------------------------------------------
return: real

********************************************************************************
procedure:
unpack_extended_float(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
unpack_extended96_float()
--------------------------------------------------------------------------------
return: real
********************************************************************************
procedure:
pack_x80tox96(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
pack_x96tox80(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
global:
UUErrorText
********************************************************************************
procedure:
UUDecodeString(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUDecodeChar(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: integer
********************************************************************************
procedure:
UUDecodeQuad(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeString(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeChar(i)
--------------------------------------------------------------------------------
parameter:
i
type:
integer
--------------------------------------------------------------------------------
return: string
********************************************************************************
procedure:
UUEncodeTriple(s)
--------------------------------------------------------------------------------
parameter:
s
type:
string
--------------------------------------------------------------------------------
return: string




